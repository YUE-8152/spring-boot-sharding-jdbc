server:
  port: 8510

#Mybatis 控制台打印SQL语句
logging:
  level:
    com.cardlan.mall: debug

spring:
  mvc:
    # 出现错误时, 直接抛出异常
    throw-exception-if-no-handler-found: true
  #不开启默认的资源处理(404异常可以获取到)
  shardingsphere:
    datasource:
      names: ds1
      ds1:
       type: com.alibaba.druid.pool.DruidDataSource
       driver-class-name: com.mysql.jdbc.Driver
       url: jdbc:mysql://localhost:3306/mytest?serverTimezone=UTC
       username: root
       password: 123456
       filters: stat,wall,slf4j
       maxActive: 20
       initialSize: 1
       maxWait: 1000
       minIdle: 1
       timeBetweenEvictionRunsMillis: 60000
       minEvictableIdleTimeMillis: 300000
       validationQuery: select 1 from dual
       testWhileIdle: true
       testOnBorrow: false
       testOnReturn: false
       poolPreparedStatements: true
       maxOpenPreparedStatements: 20
    sharding:
      tables:
        # 这个地方注意： sharding-jdbc会根据名称去找本节点，所以写sql的时候，要写此节点的名称
        t_student:
          # 表达式， 健康节点： 根据上一个节点找到此值， {1..2}为groovy语言，$会替换成{1..2}的一个值，数据库表是: t_student_1 , t_student_2
          # 这个配置是告诉sharding有多少个表
          actual-data-nodes: ds1.sys_user_$->{2020}$->{['01','02','03','04','05','06','07','08','09','10','11','12']}
          # 用于单分片键的标准分片场景
          table-strategy:
            complex:
              sharding-columns: create_time
              #复合分片算法类名称。该类需实现ComplexKeysShardingAlgorithm接口并提供无参数的构造器
              algorithmClassName: com.cardlan.sharding.jdbc.common.sharding.TableComplexShardingAlgorithm
#            standard:
#              sharding-column: create_time
#              precise-algorithm-class-name: com.cardlan.sharding.jdbc.common.config.ShardingTableAlgorithm
#              range-algorithm-class-name: com.cardlan.sharding.jdbc.common.config.TableRangeShardingAlgorithm
        order_item:
          actual-data-nodes: ds1.order_item_$->{2020}$->{['01','02','03','04','05','06','07','08','09','10','11','12']}
          table-strategy:
            complex:
              sharding-columns: create_time
              #复合分片算法类名称。该类需实现ComplexKeysShardingAlgorithm接口并提供无参数的构造器
              algorithmClassName: com.cardlan.sharding.jdbc.common.sharding.TableComplexShardingAlgorithm
#            standard:
#              sharding-column: create_time
#              precise-algorithm-class-name: com.cardlan.sharding.jdbc.common.config.ShardingTableAlgorithm
#              range-algorithm-class-name: com.cardlan.sharding.jdbc.common.config.TableRangeShardingAlgorithm
      binding-tables: sys_user,order_item
      default-data-source-name: ds1
      defaultTableStrategy: #默认表分片策略，同分库策略
        none:
    props:
      sql:
        show: true
  ## Redis 配置
  redis:
    database: 3             # Redis数据库索引（默认为0）
    host: 47.107.120.118         # Redis服务器地址
    port: 6379              # Redis服务器连接端口
    password: cardlan        # Redis服务器连接密码（默认为空）
    jedis:
      pool:
        ## 连接池最大连接数（使用负值表示没有限制）
        #spring.redis.pool.max-active=8
        max-active: 10
        ## 连接池最大阻塞等待时间（使用负值表示没有限制）
        #spring.redis.pool.max-wait=-1
        max-wait: -1
        ## 连接池中的最大空闲连接
        #spring.redis.pool.max-idle=8
        max-idle: 2
        ## 连接池中的最小空闲连接
        #spring.redis.pool.min-idle=0
        min-idle: 0
  #    timeout: 1200         # 连接超时时间（毫秒）

# redisson lock
redisson:
  address: redis://47.107.120.118:6379
  password: cardlan

mybatis:
  mapper-locations: classpath:mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
  type-aliases-package: com.cardlan.sharding.jdbc.model



